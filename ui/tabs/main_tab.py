"""
OmniaClick - –û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞

–û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è,
–≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
"""

import tkinter as tk
from tkinter import ttk, messagebox
import re

from config import *


class MainTab:
    """–û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, parent, app_instance):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π notebook
            app_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä OmniaClickApp
        """
        self.app = app_instance
        self.parent = parent
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        self.frame = ttk.Frame(parent)
        
        # GUI –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self._init_variables()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._setup_gui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._setup_event_handlers()
        
    def _init_variables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.interval_var = self.app.interval_var
        self.click_type_var = self.app.click_type_var
        self.turbo_mode_var = self.app.turbo_mode_var
        self.extreme_mode_var = self.app.extreme_mode_var
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
        self.sound_notifications_var = tk.BooleanVar(value=True)      # –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ
        self.pause_on_mouse_var = tk.BooleanVar(value=True)           # –ü–∞—É–∑–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏: –í–ö–õ
        self.pause_on_window_var = tk.BooleanVar(value=True)          # –ê–≤—Ç–æ–ø–∞—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ–∫–æ–Ω: –í–ö–õ
        self.always_on_top_var = tk.BooleanVar(value=False)           # –í—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω: –í–´–ö–õ
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.hotkey_start_var = tk.StringVar(value=DEFAULT_HOTKEY_START)
        self.hotkey_stop_var = tk.StringVar(value=DEFAULT_HOTKEY_STOP)
        
    def _setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.frame, text=APP_NAME, 
                               font=FONT_TITLE)
        title_label.pack(pady=(10, 20))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        self._setup_interval_settings()
        
        # –¢–∏–ø –∫–ª–∏–∫–∞
        self._setup_click_type()
        
        # –°—Ç–∞—Ç—É—Å
        self._setup_status()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._setup_control_buttons()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self._setup_extra_buttons()
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self._setup_hotkeys()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._setup_additional_settings()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        self._setup_emergency_info()
        
    def _setup_interval_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        settings_frame = ttk.LabelFrame(self.frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–∫–æ–≤", padding="10")
        settings_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
        ttk.Label(settings_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏ (—Å–µ–∫):").pack(anchor=tk.W, pady=(10, 5))
        
        interval_frame = ttk.Frame(settings_frame)
        interval_frame.pack(fill=tk.X, pady=5)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        vcmd = (self.frame.register(self._validate_interval_entry), '%P')
        self.interval_entry = ttk.Entry(interval_frame, width=10, textvariable=self.interval_var, 
                                       font=FONT_NORMAL, validate='key', validatecommand=vcmd)
        self.interval_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
        self.interval_entry.bind('<Key>', self._on_interval_key_press)
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        self.apply_interval_button = ttk.Button(interval_frame, text="‚úì", width=3, 
                                               command=self._apply_interval_change)
        self.apply_interval_button.pack(side=tk.LEFT, padx=(0, 5))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        self.interval_entry.bind('<Return>', self._apply_interval_change)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        self.interval_entry.config(validate="none")
        
        ttk.Label(interval_frame, text="(0.001 - 2.0)", font=("Arial", 8), foreground="gray").pack(side=tk.RIGHT, padx=(5, 0))
        
        # –¢—É—Ä–±–æ —Ä–µ–∂–∏–º
        ttk.Checkbutton(settings_frame, text="–¢—É—Ä–±–æ —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)", 
                       variable=self.turbo_mode_var, command=self._toggle_turbo).pack(anchor=tk.W, pady=2)
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if WIN32_AVAILABLE:
            ttk.Checkbutton(settings_frame, text="‚ö° –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô —Ä–µ–∂–∏–º (–¥–æ 10,000+ –∫–ª–∏–∫–æ–≤/—Å–µ–∫)", 
                           variable=self.extreme_mode_var, command=self._toggle_extreme).pack(anchor=tk.W, pady=2)
            ttk.Label(settings_frame, text="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã!", 
                     font=("Arial", 7), foreground="red").pack(anchor=tk.W, pady=(0, 5))
        else:
            ttk.Label(settings_frame, text="–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pywin32)", 
                     foreground="gray", font=("Arial", 8)).pack(anchor=tk.W, pady=2)
                     
    def _setup_click_type(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ –∫–ª–∏–∫–∞"""
        settings_frame = self.frame.winfo_children()[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π frame
        
        # –¢–∏–ø –∫–ª–∏–∫–∞
        ttk.Label(settings_frame, text="–ö–Ω–æ–ø–∫–∞ –º—ã—à–∏:").pack(anchor=tk.W, pady=(10, 5))
        click_frame = ttk.Frame(settings_frame)
        click_frame.pack(fill=tk.X)
        
        ttk.Radiobutton(click_frame, text="–õ–µ–≤–∞—è", variable=self.click_type_var, 
                       value="left").pack(side=tk.LEFT)
        ttk.Radiobutton(click_frame, text="–ü—Ä–∞–≤–∞—è", variable=self.click_type_var, 
                       value="right").pack(side=tk.LEFT, padx=(20, 0))
        ttk.Radiobutton(click_frame, text="–°—Ä–µ–¥–Ω—è—è", variable=self.click_type_var, 
                       value="middle").pack(side=tk.LEFT, padx=(20, 0))
                       
    def _setup_status(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        status_frame = ttk.LabelFrame(self.frame, text="–°—Ç–∞—Ç—É—Å", padding="10")
        status_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        self.status_label = ttk.Label(status_frame, text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
                                     font=FONT_MAIN, foreground=COLORS["ERROR"])
        self.status_label.pack()
        
        self.count_label = ttk.Label(status_frame, text="–ö–ª–∏–∫–æ–≤: 0", 
                                    font=FONT_NORMAL)
        self.count_label.pack(pady=(5, 0))
        
    def _setup_control_buttons(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(self.frame)
        control_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        self.start_button = ttk.Button(control_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", 
                                      command=self.app.start_clicking)
        self.start_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        self.stop_button = ttk.Button(control_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                     command=self.app.stop_clicking, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))
        
    def _setup_extra_buttons(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
        extra_frame = ttk.Frame(self.frame)
        extra_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        row1_frame = ttk.Frame(extra_frame)
        row1_frame.pack(fill=tk.X, pady=(0, 5))
        
        self.reset_button = ttk.Button(row1_frame, text="–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫", 
                                      command=self._reset_counter)
        self.reset_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        self.hide_button = ttk.Button(row1_frame, text="–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π", 
                                     command=self._hide_to_tray)
        self.hide_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        row2_frame = ttk.Frame(extra_frame)
        row2_frame.pack(fill=tk.X, pady=(5, 0))
        
        self.save_button = ttk.Button(row2_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                                     command=self._save_settings)
        self.save_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 2))
        
        self.load_button = ttk.Button(row2_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                                     command=self._load_settings)
        self.load_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(2, 2))
        
        self.cleanup_button = ttk.Button(row2_frame, text="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã", 
                                        command=self._cleanup_temp_files)
        self.cleanup_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(2, 0))
        
    def _setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        hotkeys_frame = ttk.LabelFrame(self.frame, text="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", padding="10")
        hotkeys_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        info_label = ttk.Label(hotkeys_frame, text="–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É", 
                              font=("Arial", 9), foreground="blue")
        info_label.pack(pady=(0, 5))
        
        # –ö–ª–∞–≤–∏—à–∞ –∑–∞–ø—É—Å–∫–∞
        start_frame = ttk.Frame(hotkeys_frame)
        start_frame.pack(fill=tk.X, pady=5)
        ttk.Label(start_frame, text="–ó–∞–ø—É—Å–∫:").pack(side=tk.LEFT)
        self.start_hotkey_entry = ttk.Entry(start_frame, textvariable=self.hotkey_start_var, width=15, 
                                           justify='center', font=('Arial', 10, 'bold'), state='readonly')
        self.start_hotkey_entry.pack(side=tk.RIGHT)
        
        # –ö–ª–∞–≤–∏—à–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        stop_frame = ttk.Frame(hotkeys_frame)
        stop_frame.pack(fill=tk.X, pady=5)
        ttk.Label(stop_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∫–∞:").pack(side=tk.LEFT)
        self.stop_hotkey_entry = ttk.Entry(stop_frame, textvariable=self.hotkey_stop_var, width=15,
                                          justify='center', font=('Arial', 10, 'bold'), state='readonly')
        self.stop_hotkey_entry.pack(side=tk.RIGHT)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self._setup_hotkey_capture()
        
        ttk.Button(hotkeys_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", 
                  command=self._apply_hotkeys).pack(pady=10)
                  
    def _setup_additional_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π"""
        extra_settings_frame = ttk.LabelFrame(self.frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", padding="10")
        extra_settings_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        ttk.Checkbutton(extra_settings_frame, text="–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                       variable=self.sound_notifications_var).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(extra_settings_frame, text="–ü–∞—É–∑–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏", 
                       variable=self.pause_on_mouse_var).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(extra_settings_frame, text="–í—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω", 
                       variable=self.always_on_top_var, command=self._toggle_always_on_top).pack(anchor=tk.W, pady=2)
        
        # –ê–≤—Ç–æ–ø–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ win32gui –¥–æ—Å—Ç—É–ø–µ–Ω
        if WIN32_AVAILABLE:
            ttk.Checkbutton(extra_settings_frame, text="–ê–≤—Ç–æ–ø–∞—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ–∫–æ–Ω", 
                           variable=self.pause_on_window_var).pack(anchor=tk.W, pady=2)
        else:
            ttk.Label(extra_settings_frame, text="–ê–≤—Ç–æ–ø–∞—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ–∫–æ–Ω (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pywin32)", 
                     foreground="gray", font=("Arial", 8)).pack(anchor=tk.W, pady=2)
                     
    def _setup_emergency_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        emergency_frame = ttk.Frame(self.frame)
        emergency_frame.pack(fill=tk.X, padx=10, pady=(5, 10))
        
        emergency_label = ttk.Label(emergency_frame, text="üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: ESC, F12 –∏–ª–∏ Ctrl+Alt+X", 
                                   font=("Arial", 9), foreground="red")
        emergency_label.pack()
        
    def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        pass
        
    def _setup_hotkey_capture(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass
        
    def _validate_interval_entry(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        if value == "":
            return True
        allowed = "0123456789.,"
        for char in value:
            if char not in allowed:
                return False
        return True
        
    def _apply_interval_change(self, event=None):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        try:
            value = self.interval_entry.get()
            if not value:
                return
                
            value = value.replace(",", ".").strip()
            if not value:
                return
                
            interval = float(value)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if interval < 0.001:
                interval = 0.001
            elif interval > 2.0:
                interval = 2.0
                
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            self.interval_var.set(f"{interval:.3f}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–∫–µ—Ä
            self.app.clicker.set_interval(interval)
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            self.apply_interval_button.config(text="OK")
            self.frame.after(1000, lambda: self.apply_interval_button.config(text="‚úì"))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
            
    def _on_interval_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ –ø–æ–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
        try:
            selection = self.interval_entry.selection_get()
            if selection and event.char in "0123456789.,":
                self.interval_entry.delete("sel.first", "sel.last")
                self.interval_entry.insert("insert", event.char)
                return "break"
        except tk.TclError:
            pass
            
    def _toggle_turbo(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–∞"""
        turbo = self.turbo_mode_var.get()
        self.app.clicker.set_turbo_mode(turbo)
        
        if turbo and self.extreme_mode_var.get():
            self.extreme_mode_var.set(False)
            self.app.clicker.set_extreme_mode(False)
            
    def _toggle_extreme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        extreme = self.extreme_mode_var.get()
        self.app.clicker.set_extreme_mode(extreme)
        
        if extreme and self.turbo_mode_var.get():
            self.turbo_mode_var.set(False)
            self.app.clicker.set_turbo_mode(False)
            
    def _toggle_always_on_top(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
        on_top = self.always_on_top_var.get()
        self.app.window.attributes('-topmost', on_top)
        
    def _reset_counter(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤"""
        self.app.clicker.reset_counter()
        self.app.gui.update_count(0)
        
    def _hide_to_tray(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π"""
        self.app.gui.hide_to_tray()
        
    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.app.save_settings()
        
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.app.load_settings()
        
    def _cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.app.cleanup_temp_files()
        
    def _apply_hotkeys(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        start_key = self.hotkey_start_var.get()
        stop_key = self.hotkey_stop_var.get()
        
        self.app.hotkey_manager.set_start_hotkey(start_key)
        self.app.hotkey_manager.set_stop_hotkey(stop_key)
        
        messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
    def set_status(self, status):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        if status == "running":
            self.status_label.config(text="–ê–∫—Ç–∏–≤–µ–Ω", foreground=COLORS["SUCCESS"])
        else:
            self.status_label.config(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", foreground=COLORS["ERROR"])
            
    def set_count(self, count):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        self.count_label.config(text=f"–ö–ª–∏–∫–æ–≤: {count}")
        
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if self.app.clicker.is_running():
            self.set_status("running")
        else:
            self.set_status("stopped")
            
    def update_count(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
        count = self.app.clicker.get_click_count()
        self.set_count(count)
        
    def set_buttons_state(self, clicking):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫"""
        if clicking:
            self.start_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
        else:
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            
    def get_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        return {
            "interval": self.interval_var.get(),
            "click_type": self.click_type_var.get(),
            "turbo_mode": self.turbo_mode_var.get(),
            "extreme_mode": self.extreme_mode_var.get(),
            "sound_notifications": self.sound_notifications_var.get(),
            "pause_on_mouse": self.pause_on_mouse_var.get(),
            "pause_on_window": self.pause_on_window_var.get(),
            "always_on_top": self.always_on_top_var.get(),
            "hotkey_start": self.hotkey_start_var.get(),
            "hotkey_stop": self.hotkey_stop_var.get(),
        }
        
    def apply_settings(self, settings):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ"""
        try:
            self.interval_var.set(settings.get("interval", DEFAULT_INTERVAL))
            self.click_type_var.set(settings.get("click_type", DEFAULT_CLICK_TYPE))
            self.turbo_mode_var.set(settings.get("turbo_mode", False))
            self.extreme_mode_var.set(settings.get("extreme_mode", False))
            self.sound_notifications_var.set(settings.get("sound_notifications", True))
            self.pause_on_mouse_var.set(settings.get("pause_on_mouse", False))
            self.pause_on_window_var.set(settings.get("pause_on_window", False))
            self.always_on_top_var.set(settings.get("always_on_top", False))
            self.hotkey_start_var.set(settings.get("hotkey_start", DEFAULT_HOTKEY_START))
            self.hotkey_stop_var.set(settings.get("hotkey_stop", DEFAULT_HOTKEY_STOP))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            self._toggle_always_on_top()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ: {e}") 