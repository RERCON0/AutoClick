"""
OmniaClick - –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
"""

import keyboard
import os
import signal
import sys
import threading
import time
from typing import Callable, Optional

from config import *


class EmergencySystem:
    """–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    
    def __init__(self):
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.active = False
        self.emergency_keys = ['ctrl+alt+x', 'f12']
        
        # –ö–æ–ª–ª–±—ç–∫–∏
        self.callbacks = {}
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        self.emergency_triggered = False
        
    def set_callbacks(self, **callbacks):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤"""
        self.callbacks.update(callbacks)
        
    def setup(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if self.active:
                return True
                
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            for key in self.emergency_keys:
                try:
                    keyboard.add_hotkey(key, self._emergency_stop_handler)
                    print(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: {key}")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å {key}: {e}")
                    
            self.active = True
            print("–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            print("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+Alt+X –∏–ª–∏ F12")
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
            
    def shutdown(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if not self.active:
                return
                
            # –£–¥–∞–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            for key in self.emergency_keys:
                try:
                    keyboard.remove_hotkey(key)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏ {key}: {e}")
                    
            self.active = False
            print("–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            
    def _emergency_stop_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        if self.emergency_triggered:
            return
            
        self.emergency_triggered = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        emergency_thread = threading.Thread(
            target=self._execute_emergency_stop, 
            daemon=True
        )
        emergency_thread.start()
        
    def _execute_emergency_stop(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê! üö®")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–ª–ª–±—ç–∫–∏
            if 'on_emergency_stop' in self.callbacks:
                try:
                    self.callbacks['on_emergency_stop']()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–±—ç–∫–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
                    
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            if 'on_force_stop_all' in self.callbacks:
                try:
                    self.callbacks['on_force_stop_all']()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
                    
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            time.sleep(0.5)
            
            # –ú–µ—Ç–æ–¥—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–ø–æ —Å—Ç–µ–ø–µ–Ω–∏ "–∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏")
            self._try_graceful_exit()
            
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
            self._force_terminate()
            
    def _try_graceful_exit(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if 'on_graceful_exit' in self.callbacks:
                try:
                    self.callbacks['on_graceful_exit']()
                    time.sleep(1)
                    return
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
                    
            # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ signal
            try:
                print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ SIGTERM...")
                os.kill(os.getpid(), signal.SIGTERM)
                time.sleep(2)
            except Exception as e:
                print(f"SIGTERM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
            # –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ sys.exit
            try:
                print("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ sys.exit...")
                sys.exit(1)
            except Exception as e:
                print(f"sys.exit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                
            # –ú–µ—Ç–æ–¥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self._force_terminate()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            self._force_terminate()
            
    def _force_terminate(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            print("üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–ê üî•")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ SIGKILL
            try:
                os.kill(os.getpid(), signal.SIGKILL)
            except:
                pass
                
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ - —á–µ—Ä–µ–∑ _exit
            try:
                os._exit(1)
            except:
                pass
                
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
            
    def trigger_emergency_stop(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print("–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self._emergency_stop_handler()
        
    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        return self.active
        
    def get_emergency_keys(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏—à —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        return self.emergency_keys.copy()
        
    def add_emergency_key(self, key: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–ª–∞–≤–∏—à–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if key not in self.emergency_keys:
                keyboard.add_hotkey(key, self._emergency_stop_handler)
                self.emergency_keys.append(key)
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏—à–∞: {key}")
                return True
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏ {key}: {e}")
            return False
            
    def remove_emergency_key(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if key in self.emergency_keys and len(self.emergency_keys) > 1:
                keyboard.remove_hotkey(key)
                self.emergency_keys.remove(key)
                print(f"–£–¥–∞–ª–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏—à–∞: {key}")
                return True
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏ {key}: {e}")
            return False
            
    def test_emergency_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)"""
        try:
            print("üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if not self.active:
                print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏—à
            for key in self.emergency_keys:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏—à–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
                    # (keyboard –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)
                    print(f"‚úì –ö–ª–∞–≤–∏—à–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {key}")
                except:
                    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª–∞–≤–∏—à–µ–π: {key}")
                    return False
                    
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False 